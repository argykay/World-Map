{"version":3,"sources":["GeoMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["world","topojson","topology","objects","units","color","scaleQuantize","domain","Math","min","features","map","f","geometry","coordinates","length","max","range","Wrapper","styled","div","Country","path","GeoMap","width","height","centerX","centerY","useState","countryName","setCountryName","x","y","fill","rx","Mercator","data","translate","mercator","i","feature","d","strokeWidth","onMouseEnter","properties","name","onMouseLeave","App","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k9/MAqBMA,EAAQC,IAAiBC,EAAUA,EAASC,QAAQC,OAIpDC,EAAQC,YAAc,CAC1BC,OAAQ,CACNC,KAAKC,IAAL,MAAAD,KAAI,YAAQR,EAAMU,SAASC,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAASC,YAAYC,YAC7DP,KAAKQ,IAAL,MAAAR,KAAI,YAAQR,EAAMU,SAASC,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAASC,YAAYC,aAE/DE,MAAO,CAAC,UAAW,UAAW,aAmDhC,IAAMC,EAAUC,IAAOC,IAAV,yHAQPC,EAAUF,IAAOG,KAAV,2GAQEC,EA9Df,YAAsD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OACjBC,EAAUF,EAAQ,EAClBG,EAAUF,EAAS,EAF0B,EAIbG,mBAAS,MAJI,mBAI5CC,EAJ4C,KAI/BC,EAJ+B,KAMnD,OACE,eAACZ,EAAD,WACGW,EACC,iDAAoBA,KAEpB,sDAEF,sBAAKL,MAAOA,EAAOC,OAAQD,EAA3B,UACE,sBACEO,EAAG,EACHC,EAAG,EACHR,MAAOA,EACPC,OAAQA,EACRQ,KArBgB,OAsBhBC,GAAI,IAEN,cAACC,EAAA,EAAD,CACEC,KAAMpC,EAAMU,SACZ2B,UAAW,CAACX,EAASC,EAAU,IAFjC,SAIG,SAACW,GAAD,OACC,4BACGA,EAAS5B,SAASC,KAAI,WAAoB4B,GAApB,IAAGC,EAAH,EAAGA,QAASlB,EAAZ,EAAYA,KAAZ,OACrB,cAACD,EAAD,CAEEoB,EAAGnB,GAAQ,GACXW,KAAM5B,EAAMmC,EAAQ3B,SAASC,YAAYC,QACzC2B,YAAa,GACbC,aAAc,kBAAMb,EAAeU,EAAQI,WAAWC,OACtDC,aAAc,kBAAMhB,EAAe,QANrC,sBACsBS,mBCxCvBQ,MApBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,oBAAGA,UAAU,QAAb,UACE,sBAAMC,GAAG,MAAT,uBACA,sBAAMA,GAAG,MAAT,uBACA,sBAAMA,GAAG,QAAT,8BAKN,cAAC,IAAD,UACG,gBAAGzB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OAAuB,cAAC,EAAD,CAAQD,MAAOA,EAAOC,OAAQA,WCL/CyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.368866ea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { scaleQuantize } from \"@visx/scale\";\nimport { Mercator } from \"@visx/geo\";\nimport topology from \"./world-topo.json\";\nimport * as topojson from \"topojson-client\";\nimport styled from \"styled-components\";\n\nexport type GeoMercatorProps = {\n  width: number;\n  height: number;\n  events?: boolean;\n};\n\nexport interface FeatureShape {\n  type: \"Feature\";\n  id: string;\n  geometry: { coordinates: [number, number][][]; type: \"Polygon\" };\n  properties: { name: string };\n}\n\n// @ts-ignore\nconst world = topojson.feature(topology, topology.objects.units) as {\n  features: FeatureShape[];\n};\n\nconst color = scaleQuantize({\n  domain: [\n    Math.min(...world.features.map((f) => f.geometry.coordinates.length)),\n    Math.max(...world.features.map((f) => f.geometry.coordinates.length)),\n  ],\n  range: [\"#dbc6fa\", \"#c299fc\", \"#9041FF\"],\n});\n\nexport const background = \"#fff\";\n\nfunction GeoMap({ width, height }: GeoMercatorProps) {\n  const centerX = width / 2;\n  const centerY = height / 2;\n\n  const [countryName, setCountryName] = useState(null);\n\n  return (\n    <Wrapper>\n      {countryName ? (\n        <p>This country is {countryName}</p>\n      ) : (\n        <p>Hover over a country!</p>\n      )}\n      <svg width={width} height={width}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill={background}\n          rx={0}\n        />\n        <Mercator<FeatureShape>\n          data={world.features}\n          translate={[centerX, centerY + 50]}\n        >\n          {(mercator) => (\n            <g>\n              {mercator.features.map(({ feature, path }, i) => (\n                <Country\n                  key={`map-feature-${i}`}\n                  d={path || \"\"}\n                  fill={color(feature.geometry.coordinates.length)}\n                  strokeWidth={0.7}\n                  onMouseEnter={() => setCountryName(feature.properties.name)}\n                  onMouseLeave={() => setCountryName(null)}\n                />\n              ))}\n            </g>\n          )}\n        </Mercator>\n      </svg>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 700px;\n  overflow: hidden;\n  color: #2f3836;\n  display: block;\n`;\n\nconst Country = styled.path`\n  pointer-events: all;\n  stroke: #fff;\n  &:hover {\n    fill: #16d8a0;\n  }\n`;\n\nexport default GeoMap;\n","import React from \"react\";\nimport \"./App.css\";\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\nimport GeoMap from \"./GeoMap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <p className=\"inner\">\n            <span id=\"one\">World Map</span>\n            <span id=\"two\">World Map</span>\n            <span id=\"three\">World Map</span>\n          </p>\n        </div>\n      </div>\n\n      <ParentSize>\n        {({ width, height }) => <GeoMap width={width} height={height} />}\n      </ParentSize>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}